package main

import (
	"bufio"
	"errors"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"text/template"
)

var errDownload = errors.New("unable to download confusables")

const (
	base    = 16
	bitsize = 64
	url     = "https://www.unicode.org/Public/security/latest/confusables.txt"
)

const sourceFile = `package confusables

// THIS FILE WAS AUTOGENERATED - DO NOT EDIT

var confusables = map[rune]string{
{{- range .}}
	{{ . -}}
{{end}}
}
`

func main() {
	if err := buildTable(); err != nil {
		log.Fatal("unable to build tables")
	}
}

func buildTable() error {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return errDownload
	}

	var confusables []string

	// Extract confusables from downloaded file
	scanner := bufio.NewScanner(resp.Body)

	for scanner.Scan() {
		line := scanner.Text()

		// Remove BOM, skip comments and blank lines
		line = strings.TrimPrefix(line, string([]byte{0xEF, 0xBB, 0xBF}))
		if strings.HasPrefix(line, "#") || line == "" {
			continue
		}

		// Extract source -> target mapping
		fields := strings.Split(line, " ;\t")
		source := codePointToString(fields[0])
		target := codePointToString(fields[1])
		entry := fmt.Sprintf("0x%.8X: %+q,", source[0], string(target))

		confusables = append(confusables, entry)
	}

	// Output a mapping file
	tmpl := template.New("tables.go")

	tmpl, err = tmpl.Parse(sourceFile)
	if err != nil {
		return fmt.Errorf("unable to parse template: %w", err)
	}

	f, err := os.Create("tables.go")
	if err != nil {
		return fmt.Errorf("unable to create tables.go: %w", err)
	}

	defer f.Close()

	if err := tmpl.Execute(f, confusables); err != nil {
		return fmt.Errorf("unable to execute template: %w", err)
	}

	return nil
}

func codePointToString(s string) []rune {
	codePoints := strings.Split(s, " ")

	runes := make([]rune, 0, len(codePoints))

	for _, unicodeCodePoint := range codePoints {
		codePoint, err := strconv.ParseUint(unicodeCodePoint, base, bitsize)
		if err != nil {
			log.Fatal(err)
		}

		runes = append(runes, rune(codePoint))
	}

	return runes
}
